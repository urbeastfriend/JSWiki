
// Код JS может взаимодействовать с каким-нибудь ресурсом (сервером)
// Для осуществления подобного взаимодействия обычно применяется технология Ajax
// Данная технология позволяет отправлять запросы к серверу из клиентского кода javascript без перезагрузки страницы.


// Для создания приложений, использующих Ajax применяются различные способы. Но самым распространнёым является использование
// объекта XMLHttpRequest

let xhr = new XMLHttpRequest();

// После создания объекта XMLHttpRequest можно отправлять запросы к серверу.
// Но для начала нужно вызвать метод open() для инициализации

// Этот метод принимает пять параметров, среди которых первые два являются обязательными.
//  - method: тип запроса ("GET", "POST", "PUT", "DELETE" и т.д.)
//  - url: адрес ресурса, к которому отправляется запрос
//  - async: логическое значение, которое указывает, будет ли запрос асинхронным. Если значение true (значение по умолчанию), то запрос асинхронный
//  - user: имя пользователя, которое применяется при его аутентификации на сервере, по умолчанию равно null
//  - password: пароль пользователя, который применяется при его аутентификации на сервере, по умолчанию равно null

// Например, запрос типа "GET" по адресу "http://localhost/hello":
// xhr.open("GET", "http://localhost/hello")

// После инициализации запроса методом open() можно отправить запрос с помощью метода send():
// XMLHttpRequest.send(body)
// В качестве параметра в метод send() передаются данные, которые отправляются на сервер.
// Если этому параметру не передано никакого значения, то его значение по умолчанию null.


// Свойства XMLHttpRequest
// Объект XMLHttpRequest имеет ряд свойств, которые позволяют проконтролировать выполнение запроса:
//  - status: содержит статусный код ответа HTTP, который пришел от сервера. Например, статусный код 200 указывает на то, что запрос прошел успешно.
//  - statusText: возвращает текст статуса ответа, например, "200 OK"
//  - responseType: возвращает тип ответа. Есть следующие типы:
//     "": пустая строка
//     "arraybuffer": ответ представляет объект ArrayBuffer, которые содержит бинарные данные
//     "blob": ответ представляет объект Blob, которые содержит бинарные данные
//     "document": ответ представляет документ HTML/XML
//     "json": ответ представляет данные в формате json
//     "text": ответ представляет текст

//  - response: возвращает ответ сервера
//  - responseText: возвращает ответа сервера в виде текста
//  - responseXML: возвращает XML/HTML, если ответ от сервера в формате XML/HTML
//  - readyState: хранит состояния запроса, которое представляет число:
//     0: объект XMLHttpRequest создан, но метод open() еще не был вызван для инициализации объекта
//     1: метод open() был вызван, но запрос еще не был отправлен методом send()
//     2: запрос был отправлен, заголовки и статус ответа получены и готовы к использованию
//     3: ответ получен от сервера
//     4: выполнение запроса полностью завершено (даже если получен код ошибки, например, 404)
// Соответственно проверив данное свойство, мы можем понять, на какой стадии находится запрос
// Для отслеживания состояния запроса можно применять события XMLHttpRequest:

//  - load: срабатывает после выполнения запроса. Для установки обработчика применяется свойство onload
//  - readystatechange: возникает каждый раз, когда изменяется значение свойства readyState.
// Для установки обработчика применяется свойство onreadystatechange

let xhr2 = new XMLHttpRequest();
xhr2.open("GET", "http://metanitjstest/hello.txt")

xhr2.onload = () => {
    if (xhr2.status == 200) {
        console.log(xhr2.responseText)
    }
    else {
        console.log("Server response: ", xhr2.statusText)
    }
}
xhr2.send();