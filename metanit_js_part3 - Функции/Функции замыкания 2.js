// Замыкание (closure) представляют собой конструкцию, 
// когда функция, созданная в одной области видимости, 
// запоминает свое лексическое окружение даже в том случае, 
// когда она выполняет вне своей области видимости.

function outer(){       // внешняя функция
    let x = 5;          // некоторая переменная
    function inner(){   // вложенная функция
        x++;            // действия с переменной x
        console.log(x);
    };
    return inner;
}

// fn = inner так как функция outer
// возвращает функцию inner
// При этом функция запомнила своё окружение - внешнюю переменную x 
let fx = outer()      

// Переменная x представляет лексическое окружение для функции inner
fx()
fx()

// Ещё один пример
// При создании обоих замыканий fn1 и fn2 создаётся отдельное окружение
function multiply(n){
    var x = n;
    return function(m){ return x * m;};
}
var fn1 = multiply(5);
var result1 = fn1(6); // 30
console.log(result1); // 30
 
var fn2= multiply(4);
var result2 = fn2(6); // 24
console.log(result2); // 24

// Также можно использовать другой вариант вызова замыканий

var fn3 = multiply(4)(5) // 20
console.log(fn3)



