
// Map - карта или словарь, представляет структуру данных,
// где каждый элемент представляет собой пару ключ-значение
// ключи - key являются уникальными, тоесть каждому ключу сопоставлен только один элемент

// Для создания применяется конструктор объекта Map

let myMap = new Map();

// Также можно инициализировать коллекцию начальными значениями, передав их в конструктор
// в виде массива элементов формата [[1,"a"], [2,"b"]]

// В данном случае числа 1, 2, 3 являются ключами, а строки "a", "b", "c" - значениями.
myMap = new Map([[1, "a"], [2, "b"], [3, "c"]])
console.log(myMap);

// С помощью свойства size можно проверить количество элементов в Map:
console.log(`Map size = ${myMap.size}`)

// Добавление и изменение элементов
// Для добавления и изменения элементов используется метод set()
// Первый параметр метода set() представляет ключ, а второй параметр - значение элемента. 
// Если по такому ключу нет элементов, то добавляется новый элемент. 
// Если ключ уже есть, то уже имеющийся элемент изменяет свое значение.
myMap = new Map([[1, "a"], [2, "b"], [3, "c"]]);
myMap.set(4, "d");      // добавление элемента
myMap.set(2, "v");      // изменение элемента
console.log(myMap);     // Map(4) {1 => "a", 2 => "v", 3 => "c", 4 => "d"}

// Получение элементов
// Для получения элемента по ключу применяется метод get(), в который передается ключ элемента:
// Если map не содержит элемента по заданному ключу, то метод возвращает undefined.
// Чтобы избежать возвращения undefined мы можем проверить наличие элемента по ключу с помощью метода has(). 
// Если элемент по ключу имеется, то метод возвращает true, иначе возвращается false:
myMap = new Map([[1, "Tom"], [2, "Bob"], [3, "Sam"]]);
console.log("map get element with key = 2 " + myMap.get(2));  // Bob
console.log("map get element with key = 7 " + myMap.get(7));  // undefined
console.log("map has element with key = 2 " + myMap.has(2));  // true
console.log("map has element with key = 7 " + myMap.has(7));  // false
if (myMap.has(1)) console.log("map has element with key = 1 " + myMap.get(1)); // Tom


// Удаление элементов
// Для удаления одного элемента по ключу применяется метод delete():
myMap = new Map([[1, "Tom"], [2, "Bob"], [3, "Sam"]]);
console.log("original map") // Map(3) {1 => 'Tom', 2 => 'Bob', 3 => 'Sam'}
console.log(myMap)
myMap.delete(2);
console.log("deleted element with key = 2 from map")
console.log(myMap);     // Map(2) {1 => "Tom", 3 => "Sam"}

// Перебор элементов
// Для перебора элементов используется метод forEach:
myMap = new Map([[1, "Tom"], [2, "Bob"], [3, "Sam"]]);

// Метод forEach в качестве параметра получает функцию обратного вызова, которая имеет три параметра. 
// Первый и второй параметры - это соответственно значение и ключ текущего перебираемого элемента, 
// а третий параметр - перебираемый объект Map.
myMap.forEach(function (value1, value2, map) {
    console.log(value2, value1);
})

// Также для перебора объекта Map можно использовать циклы, например, цикл for...of:

myMap = new Map([[1, "Tom"], [2, "Bob"], [3, "Sam"]]);
for (item of myMap) {
    // Каждый элемент из Map помещается в переменную item, которая в свою очередь представляет массив.
    // Первый элемент этого массива - ключ, а второй элемент - значение элемента.
    console.log(item[0], item[1]);
}