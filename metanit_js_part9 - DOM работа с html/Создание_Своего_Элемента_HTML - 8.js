
// По умолчанию HTML представляет ряд встроенных элементов
// Но мы можем создать и использовать собственные элементы html.
// в JS html-элементы представлены интерфейсом HTMLElement,
// соответственно реализуя данный интерфейс мы можем создать свои классы

// Как и в любых классах, мы можем определять методы и позже их вызывать
class MyHtmlElement extends HTMLElement {
    constructor() {
        super()

        let initMessage = `Я - новый html элемент, нажми на меня, чтобы узнать время`

        this.textContent = initMessage
    }

    connectedCallback() {



        //Также мы можем определить у элемента свои атрибуты и затем использовать их. 
        if (this.hasAttribute("myHtmlElementColor")) {
            this.style.color = this.getAttribute("myHtmlElementColor")
        }
        else {
            this.style.color = "green";
        }
    }
    getCurrentTime() {
        let time = new Date()
        this.textContent = `Время -  ${time}`
    }
}

customElements.define("my-html-element", MyHtmlElement)

let myElement = document.getElementById("myElementId")

myElement.addEventListener("click", () => myElement.getCurrentTime());

// Второй важный момент - мы должны зарегиститровать наш кастомный элемент, чтобы браузер знал, что такой есть.
// Для этого применяется встроенная функция customElements.define(name,constructor,options)

// Она принимает три параметра:
//  - name: имя кастомного элемента html, который будет представлять класс JavaScript. Важно: имя должно содержать дефис.
//  - constructor: конструктор (по сути класс JavaScript), который представляет кастомный элемент html.
//  - options: необязательный параметр - объект, который настраивает кастомный html-элемент.
// В настоящий момент он поддерживает один параметр - extends.
// Он определяет название встроенного html-элемента, который применяется для создания кастомного элемента html.

// Как правило, классы кастомных элементов применяют конструктор.
// Причем в самом начале конструктора должен идти вызов функции super(), который гарантирует,
// что наш класс унаследовал все методы, атрибуты и свойства интерфейса HTMlElement.

// События жизненного цикла

// Кастомный элемент html имеет свой жизненный цикл, который описывается следующими методами:

//  - connectedCallback: вызывается каждый раз, когда кастомный элемент html добавляется в DOM.
//  - disconnectedCallback: вызывается каждый раз, когда кастомный элемент html удаляется из DOM.
//  - adoptedCallback: вызывается каждый раз, когда кастомный элемент html перемещается в новый элемент.
//  - attributeChangedCallback: вызывается при каждом изменении (добавлении, изменении значения или удаления) атрибута кастомного элемента html.
