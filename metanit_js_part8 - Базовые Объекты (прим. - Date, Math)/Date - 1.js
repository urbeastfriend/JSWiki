
// Объект Date позволяет работать с датами и временем в JavaScript.

// Первый способ создания объекта Date - вызов пустого конструктора без параметров
// Так объект будет указывать на текущую дату компьютера
let currentDate = new Date();
console.log(currentDate);  // Mon Apr 24 2023 14:00:54 GMT+0300 (Москва, стандартное время)


// Второй способ заключается в передаче в конструктор Date количества миллисекунд, 
// которые прошли с начала эпохи Unix, то есть с 1 января 1970 года 00:00:00 GMT:

let dateFromUnix = new Date(1359270000000);
console.log(dateFromUnix); // Sun Jan 27 2013 11:00:00 GMT+0400 (Москва, стандартное время)


// Третий способ - передача в конструктор день, месяц, год
let thirdDate = new Date("24 Apr 2023");
console.log(thirdDate);    // Mon Apr 24 2023 00:00:00 GMT+0300 (Москва, стандартное время)

// Четвертый способ состоит в передаче в конструктор Date всех параметров даты и времени:

var myDate = new Date(2012, 11, 25, 18, 30, 20, 10); // Tue Dec 25 2012 18:30:20 GMT+0300 (RTZ 2 (зима))
// В данном случае используются по порядку следующие параметры: new Date(год, месяц, число, час, минуты, секунды, миллисекунды).
console.log(myDate);

// Получение даты и времени
// Для получения различных компонентов даты применяется ряд методов:

// getDate(): возвращает день месяца
// getDay(): возвращает день недели (отсчет начинается с 0 - воскресенье, и последний день - 6 - суббота)
// getMonth(): возвращает номер месяца (отсчет начинается с нуля, то есть месяц с номер 0 - январь)
// getFullYear(): возвращает год
// toDateString(): возвращает полную дату в виде строки
// getHours(): возвращает час (от 0 до 23)
// getMinutes(): возвращает минуты (от 0 до 59)
// getSeconds(): возвращает секунды (от 0 до 59)
// getMilliseconds(): возвращает миллисекунды (от 0 до 999)
// toTimeString(): возвращает полное время в виде строки


//Перевести из числовых значений в более привычные названия для дней недели и месяцев используются массивы. 
// Получив индекс дня недели (myDate.getDay()) и индекс месяца (myDate.getMonth()) можно получить нужный элемент из массива.
var days = ["Воскресенье", "Понедельник", "Вторник", "Среда", "Четверг", "Пятница", "Суббота"];
var months = ["Январь", "Февраль", "Март", "Апрель", "Май", "Июнь",
    "Июль", "Август", "Сентябрь", "Октябрь", "Ноябрь", "Декабрь"];

var myDate = new Date();
var fullDate = "Сегодня: " + myDate.getDate() + " " + months[myDate.getMonth()] +
    " " + myDate.getFullYear() + ", " + days[myDate.getDay()];
console.log(fullDate); // Сегодня: 24 Апрель 2023, Понедельник


// Установка даты и времени
// Коме задания параметров даты в конструкторе для установки мы также можем использовать дополнительные методы объекта Date:

// setDate(): установка дня в дате
// setMonth(): уставовка месяца (отсчет начинается с нуля, то есть месяц с номер 0 - январь)
// setFullYear(): устанавливает год
// setHours(): установка часа
// setMinutes(): установка минут
// setSeconds(): установка секунд
// setMilliseconds(): установка миллисекунд

var days = ["Воскресенье", "Понедельник", "Вторник", "Среда", "Четвег", "Пятница", "Суббота"];
var months = ["Январь", "Февраль", "Март", "Апрель", "Май", "Июнь",
    "Июль", "Август", "Сентябрь", "Октябрь", "Ноябрь", "Декабрь"];

var myDate = new Date();
myDate.setDate(15);
myDate.setMonth(6);
myDate.setYear(2013);

var fullDate = myDate.getDate() + " " + months[myDate.getMonth()] +
    " " + myDate.getFullYear() + ", " + days[myDate.getDay()];
console.log(fullDate); // 15 Июль 2013, Понедельник

//При установке значений мы можем передать величину, большую, чем максимальное допустимое значение. Например, установить для часа число 54:
// этом случае значение часа будет равно 54 - 24 * 2 = 6, а оставшиеся часы будут составлять два дня (24 * 2), что прибавит к дате два дня.
// То же самое действует и в отношении дней, минут, секунд, миллисекунд и месяцев.
