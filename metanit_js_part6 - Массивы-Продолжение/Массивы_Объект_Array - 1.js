
// Для хранения набора данных в языке JavaScript предназначены массивы
// До этого в основах языка мы уже познакомились с массивами, но пришло время рассмотреть их более детально

// Массивы в JavaScript представлены объектом Array. Объект Array предоставляет ряд свойств и методов,
// с помощью которых мы можем управлять массивом и его элементами.

// Можно создать пустой массив, используя квадратные скобки или конструктор Array:
const users = new Array();
const people = [];

console.log(users); // Array[0]
console.log(people); // Array[0]

// Можно сразу же инициализировать массив некоторым количеством элементов:
users = new Array("Tom", "Bill", "Alice");
people = ["Sam", "John", "Kate"];

console.log(users); // ["Tom", "Bill", "Alice"]
console.log(people); // ["Sam", "John", "Kate"]

// Ещё один способ инициализации массивов представляет метод Array.of() - он принимает элементы и инициизирует ими массив:

people = Array.of("Tom", "Bob", "Sam");
console.log(people); // ["Tom", "Bob", "Sam"]

// Можно определить массив и по ходу определять в него новые элементы:
// При этом не важно, что по умолчанию массив создается с нулевой длиной. 
// С помощью индексов мы можем подставить на конкретный индекс в массиве тот или иной элемент.
users = [];
users[1] = "Tom";
users[2] = "Kate";
console.log(users[1]); // "Tom"
console.log(users[0]); // undefined

// Еще один способ представляет функция Array.from(). Она имеет много вариантов, рассмотрим самые распространенные:
// Эта функция позволяет разобрать некий объект, который условно говоря "похож на массив".
// Например строку можно разобрать на набор символов

const array = Array.from("Hello");
console.log(array); // ["H", "e", "l", "l", "o"]

// В качестве второго параметра передается функция преобразования, которая через первый параметр получает текущий элемент набора и возвращает некоторый результат его трансформации.

const numbers = [1, 2, 3, 4];
array = Array.from(numbers, n => n * n);
console.log(array); // [1, 4, 9, 16]

// И еще одна версия функции Array.from() в качестве второго параметра принимает функцию преобразования, в которую кроме элемента из перебираемого набора передается и индекс этого элемента: Array.from(arrayLike, function mapFn(element, index) { ... })
// Используем эту версию и передадим в функцию объект со свойством length:

array = Array.from({ length: 3, "0": "Tom", "1": "Sam", "2": "Bob" }, (element) => {
    console.log(element);
    return element;
});
console.log(array); // ["Tom", "Sam", "Bob"]

