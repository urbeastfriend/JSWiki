
С помощью оператора as экспортируемым/импортируемым компонентам модуля можно назначить псевдоним. 
Затем для использования подобных компонентов применяется не их непосредственное имя, а их псевдоним.

//////////////////////////////////////////////////////////////////////////////////////////////////
let welcome = "Welcome";
const hello = "Hello";
 
function sayHello() {
  console.log("Hello METANIT.COM");
}
 
class Messenger {
    send(text){
        console.log("Sending message:", text);
    }
}
 
export {welcome as simpleMessage, hello, sayHello as printMessage, Messenger}
//////////////////////////////////////////////////////////////////////////////////////////////////
Так, для константы welcome определен псевдним simpleMessage, а для функции sayHello определен псевдним printMessage().
В этом случае при импорте модуля message.js данные компоненты будут доступны через свои псевднимы:

//////////////////////////////////////////////////////////////////////////////////////////////////
import {simpleMessage, printMessage, Messenger} from "./message.js";
 
printMessage();
 
const telegram = new Messenger();
telegram.send(simpleMessage);
//////////////////////////////////////////////////////////////////////////////////////////////////

Псевдонимы при импорте
Подобным образом можно указать псевдонимы и при импорте. 
Это может быть актуально, если имя импортируемого компонента довольно велико, и мы хотим установить для него более краткий псевдоним. 
Вторая причина: в модуле уже есть компоненты с таким именем и для одноименных компонентов подключаемого модуля установливаются псевдонимы. 
Третья причина - мы хотим дать компонентам более описательные выразительные имена.

//////////////////////////////////////////////////////////////////////////////////////////////////
import {simpleMessage as messageText, printMessage as printHello, Messenger} from "./message.js";
 
const printMessage = ()=>console.log("Hello from main module");
 
printHello();
printMessage();
 
const telegram = new Messenger();
telegram.send(messageText);
//////////////////////////////////////////////////////////////////////////////////////////////////